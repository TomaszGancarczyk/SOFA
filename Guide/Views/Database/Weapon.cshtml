@using Guide.Models
@using System.Net
@using Guide.Models.ViewModels;
@model WeaponViewModel

@{
    ViewData["Title"] = "Database";
}

@{
    <img src="@Model.Weapon.ImgSource" />
    <h1>Id: @Model.Weapon.Id</h1>
    <h3>@Model.Weapon.Name</h3>
    <h5>Rarity: @Model.Weapon.Rarity</h5>
    <h5>Class: @Model.Weapon.Class</h5>
    <h5>Weight: @Model.Weapon.Weight</h5>
    if (Model.Weapon.Features != null && Model.Weapon.Features.Count > 0)
    {
        <h5>Features:</h5>
        foreach (string feature in Model.Weapon.Features)
        {
            <p>@feature</p>
        }
    }
    if (Model.Weapon.Stats != null)
    {
        <h5>Stats:</h5>
        foreach (KeyValuePair<string, string> stat in Model.Weapon.Stats)
        {
            <p>
                @stat.Key: @stat.Value
            </p>
        }
    }
    <p>@Model.Weapon.Description</p>
    if (Model.Weapon.DamageGraph != null)
    {
        <canvas id="weaponChart" style="max-width:500px;max-height:300px;"></canvas>
    }

    <h1>Barter</h1>
    @if (Model.Weapon.Barter != null)
    {
        <p>@Model.Weapon.Barter.BaseName lvl @Model.Weapon.Barter.RequiredLevel</p>
        <h5>Offers</h5>
        int i = 1;
        foreach (var offer in Model.Weapon.Barter.Offers)
        {
            <h5>Offer #@i</h5>
            <p>@offer.Price roubles</p>
            foreach (var item in offer.RequiredItems)
            {
                <p>@item.Value @item.Key</p>
            }
            i++;
        }
    }

    <h3>Upgrades</h3>
    foreach (KeyValuePair<int, Dictionary<string, string>> upgrade in Model.Weapon.UpgradeStats)
    {
        <h5>+@upgrade.Key</h5>
        foreach (KeyValuePair<string, string> stat in upgrade.Value)
        {
            <p>
                @stat.Key: @stat.Value
            </p>
        }
    }
}

@* Damage graph *@
<script>
    @{
        string xValues = "";
        string yValues = "";
        double graphHeight = 0;
        List<string> distanceLabels = [];
        if (Model.Weapon.DamageGraph != null)
        {
            graphHeight = Model.Weapon.DamageGraph.StartDamage + 5;
            double damageDecreaseStart = Model.Weapon.DamageGraph.DamageDecreaseStart;
            double damageDecreaseEnd = Model.Weapon.DamageGraph.DamageDecreaseEnd;
            double maxDistance = Model.Weapon.DamageGraph.MaxDistance;
            double startDamage = @Model.Weapon.DamageGraph.StartDamage;
            double endDamage = @Model.Weapon.DamageGraph.EndDamage;
            distanceLabels = [
                "0",
                damageDecreaseStart.ToString().Replace(",", "."),
                damageDecreaseEnd.ToString().Replace(",", "."),
                maxDistance.ToString().Replace(",", ".")
            ];
            xValues = $"[0, ";
            yValues = $"[{startDamage.ToString().Replace(",", ".")}, ";
            for (int i = 1; i <= Math.Truncate(maxDistance / 10); i++)
            {
                if (damageDecreaseStart / 10 - i < 1 && damageDecreaseStart / 10 - i >= 0)
                {
                    if (damageDecreaseStart / 10 - i != 0)
                    {
                        xValues += $"{10 * i}, ";
                        yValues += "NaN, ";
                    }
                    xValues += $"{damageDecreaseStart.ToString().Replace(",", ".")}, ";
                    yValues += $"{startDamage.ToString().Replace(",", ".")}, ";
                }
                else if (damageDecreaseEnd / 10 - i < 1 && damageDecreaseEnd / 10 - i >= 0)
                {
                    if (damageDecreaseEnd / 10 - i != 0)
                    {
                        xValues += $"{10 * i}, ";
                        yValues += "NaN, ";
                    }
                    xValues += $"{damageDecreaseEnd.ToString().Replace(",", ".")}, ";
                    yValues += $"{endDamage.ToString().Replace(",", ".")}, ";
                }
                else if (maxDistance / 10 - i < 1 && maxDistance / 10 - i >= 0)
                {
                    if (maxDistance / 10 - i != 0)
                    {
                        xValues += $"{10 * i}, ";
                        yValues += "NaN, ";
                    }
                    xValues += $"{maxDistance.ToString().Replace(",", ".")}]";
                    yValues += $"{endDamage.ToString().Replace(",", ".")}]";
                }
                else
                {
                    xValues += $"{10 * i}, ";
                    yValues += "NaN, ";
                }
            }
        }
    }

    const xValues = @xValues;
    const yValues = @yValues;
    new Chart("weaponChart", {
        type: "line",
        data: {
            labels: xValues,
            datasets:
                [{
                    fill: false,
                    lineTension: 0,
                    backgroundColor: "rgba(255,255,255,0.5)",
                    borderColor: "rgba(255,255,255,0.2)",
                    data: yValues,
                    spanGaps: true,
                }]
        },
        options:
        {
            plugins: {
                legend: { display: false },
            },
            scales:
            {
                x: {
                    border: {
                        color: "rgba(255,255,255,0.2)",
                        width: 2,
                    },
                    grid: {
                        color: "rgba(255,255,255,0.1)",
                    },
                    title: {
                        color: "rgba(255,255,255,0.5)",
                        display: true,
                        text: "Distance",
                    },
                    ticks: {
                        display: true,
                        color: "rgba(255,255,255,0.5)",
                            callback: function(value, index, ticks) {
    @foreach (string label in distanceLabels)
    {
        @:if (this.getLabelForValue(value) == @label)
        @:{
        @:return this.getLabelForValue(value) + "m";
        @:}
    }
                            }
                    }
                },
                y: {
                    border: {
                        color: "rgba(255,255,255,0.2)",
                        width: 2,
                    },
                    grid: {
                        display: false,
                    },
                    title: {
                        color: "rgba(255,255,255,0.5)",
                        display: true,
                        text: "Damage",
                    },
                    min: 0, max: @graphHeight.ToString().Replace(",", "."),
                    ticks: {
                        display: true,
                        color: "rgba(255,255,255,0.5)",
                        stepSize: 10,
                    }
                },
            }
        }
    });
</script>
