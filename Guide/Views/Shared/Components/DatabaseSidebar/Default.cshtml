@using Guide.Models
@using System.Net
@using Guide.Models.ViewModels
@model DatabaseViewModel

@{
    ViewData["Title"] = "Database";
}

<script>
    function openDatabaseSidebar(element) {
        closeMainSidebars()
        var sidebarId = element.getAttribute('data-sidebar-id');
        var sidebarElement = document.getElementById(sidebarId);
        sidebarElement.style.left = "200px";
    }
    function openSidebar(element) {
        closeMainSidebars()
        var backgroundElement = document.getElementById("backgroundSidebar");
        backgroundElement.style.display = "block";
        var sidebarId = element.getAttribute('data-sidebar-id');
        var sidebarElement = document.getElementById(sidebarId);
        sidebarElement.style.left = "200px";
    }
    function openSecondarySidebar(element) {
        closeMainSidebars()
        var sidebarId = element.getAttribute('data-sidebar-id');
        var sidebarElement = document.getElementById(sidebarId);
        sidebarElement.style.left = "400px";
    }
    function openTertiarySidebar(element) {
        closeSecondarySidebars()
        var sidebarId = element.getAttribute('data-sidebar-id');
        var sidebarElement = document.getElementById(sidebarId);
        sidebarElement.style.left = "600px";
    }
    function closeSidebar(sidebarId) {
        var sidebarElement = document.getElementById(sidebarId);
        sidebarElement.style.left = "0px";
    }
    function closeDatabaseSidebar() {
        closeMainSidebars()
        var backgroundElement = document.getElementById("backgroundSidebar");
        backgroundElement.style.display = "none";
        var sidebarElement = document.getElementById("databaseSidebar");
        sidebarElement.style.display = "none";
        sidebarElement.style.left = "0px";
        sidebarElement.style.display = "block";
    }
    function closeMainSidebars() {
        closeSecondarySidebars()
        closeSidebar("armorSidebar")
        closeSidebar("weaponSidebar")
        closeSidebar("artefactSidebar")
        closeSidebar("containerSidebar")
        closeSidebar("attachmentSidebar")
        closeSidebar("bulletSidebar")
        closeSidebar("grenadeSidebar")
        closeSidebar("medicineSidebar")
        closeSidebar("barterSidebar")
        closeSidebar("paintSidebar")
        closeSidebar("otherSidebar")
    }
    function closeSecondarySidebars() {
        closeSidebar("clothingSidebar")
        closeSidebar("combatSidebar")
        closeSidebar("comboSidebar")
        closeSidebar("scientistSidebar")

        closeSidebar("biochemicalSidebar")
        closeSidebar("electrophysicalSidebar")
        closeSidebar("gravitationalSidebar")
        closeSidebar("thermalSidebar")

        closeSidebar("assaultriflesSidebar")
        closeSidebar("devicesSidebar")
        closeSidebar("otherweaponsSidebar")
        closeSidebar("machinegunsSidebar")
        closeSidebar("meleeweaponsSidebar")
        closeSidebar("pistolsSidebar")
        closeSidebar("shotgunsandriflesSidebar")
        closeSidebar("sniperriflesSidebar")
        closeSidebar("submachinegunsSidebar")

        closeSidebar("muzzlesandsilencersSidebar")
        closeSidebar("sightsSidebar")
        closeSidebar("hanguardsandbracketsSidebar")
        closeSidebar("magazinesSidebar")
        closeSidebar("otherattachmentsSidebar")
        closeSidebar("pistolgripsSidebar")
    }
</script>

<div class="sticky" style="top: 80px; z-index: 1;">
    <div id="mainSidebar" class="sidebar-container sticky">
        <button class="sidebar-button" onclick="location.href='@Url.Action("Index", "Guide")'">
            Guide
        </button>
        <button class="sidebar-button" onclick="location.href='@Url.Action("Index", "Market")'">
            Market
        </button>
        <button class="sidebar-button" data-sidebar-id="databaseSidebar" onclick="openSidebar(this)">
            Database
        </button>
        <button class="sidebar-button" onclick="location.href='@Url.Action("Index", "Barter")'">
            Barter Tree
        </button>
        <button class="sidebar-button" onclick="location.href='@Url.Action("Index", "ArtefactBuilder")'">
            Artefact Builder
        </button>
        <button class="sidebar-button" onclick="location.href='@Url.Action("Index", "Map")'">
            Map
        </button>
        <button class="sidebar-button" onclick="location.href='@Url.Action("Index", "Quest")'">
            Quest Tree
        </button>
        <button class="sidebar-button" onclick="location.href='@Url.Action("Index", "Timer")'">
            Timers
        </button>
    </div>
    <div id="databaseSidebar" class="sidebar-body sidebar-container sticky">
        <button class="sidebar-button-back sidebar-button" onclick="closeDatabaseSidebar()">
        </button>
        <button class="sidebar-button" data-sidebar-id="weaponSidebar" onclick="openSecondarySidebar(this)">
            Weapons
        </button>
        <button class="sidebar-button" data-sidebar-id="armorSidebar" onclick="openSecondarySidebar(this)">
            Armors
        </button>
        <button class="sidebar-button" data-sidebar-id="containerSidebar" onclick="openSecondarySidebar(this)">
            Backpacks and Containers
        </button>
        <button class="sidebar-button" data-sidebar-id="artefactSidebar" onclick="openSecondarySidebar(this)">
            Artefacts
        </button>
        <button class="sidebar-button" data-sidebar-id="attachmentSidebar" onclick="openSecondarySidebar(this)">
            Attachments
        </button>
        <button class="sidebar-button" data-sidebar-id="bulletSidebar" onclick="openSecondarySidebar(this)">
            Bullets
        </button>
        <button class="sidebar-button" data-sidebar-id="grenadeSidebar" onclick="openSecondarySidebar(this)">
            Grenades
        </button>
        <button class="sidebar-button" data-sidebar-id="medicineSidebar" onclick="openSecondarySidebar(this)">
            Medicines
        </button>
        <button class="sidebar-button" data-sidebar-id="barterSidebar" onclick="openSecondarySidebar(this)">
            Barter
        </button>
        <button class="sidebar-button" data-sidebar-id="paintSidebar" onclick="openSecondarySidebar(this)">
            Skins and Paints
        </button>
        <button class="sidebar-button" data-sidebar-id="otherSidebar" onclick="openSecondarySidebar(this)">
            Others
        </button>
    </div>
    <div>
        @* armor sidebar *@
        @{
            List<string> armorClasses = ["Clothing", "Combat", "Combo", "Scientist"];
        }
        <div id="armorSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (string armorClass in armorClasses)
            {
                string id = $"{armorClass.ToLower().Replace(" ", "")}Sidebar";
                <button class="sidebar-button" data-sidebar-id=@id onclick="openTertiarySidebar(this)">
                    @armorClass
                </button>
            }
        </div>
        @{
            @foreach (string armorClass in armorClasses)
            {
                string id = $"{armorClass.ToLower().Replace(" ", "")}Sidebar";
                <div id=@id class="sidebar-body-body-body sidebar-container sticky">
                    <button class="sidebar-button-back sidebar-button" onclick="closeSecondarySidebars()">
                    </button>
                    @foreach (ArmorModel armor in Model.Armors)
                    {
                        if (armor.Class == armorClass)
                        {
                            <button class="sidebar-button" onclick="location.href='@Url.Action("Armor", "Database", new {armorId = armor.Id})'">
                                @armor.Name
                            </button>
                        }
                    }
                </div>
            }
        }


        @* container & backpack sidebar *@
        <div id="containerSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (ContainerModel container in Model.Containers)
            {
                <button class="sidebar-button" onclick="location.href='@Url.Action("Container", "Database", new {containerId = @container.Id})'">
                    @container.Name
                </button>
            }
        </div>


        @* artefact sidebar *@
        @{
            List<string> artefactClasses = ["Biochemical", "Electrophysical", "Gravitational", "Thermal"];
        }
        <div id="artefactSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (string artefactClass in artefactClasses)
            {
                string id = $"{artefactClass.ToLower().Replace(" ", "")}Sidebar";
                <button class="sidebar-button" data-sidebar-id=@id onclick="openTertiarySidebar(this)">
                    @artefactClass
                </button>
            }
        </div>
        @{
            @foreach (string artefactClass in artefactClasses)
            {
                string id = $"{artefactClass.ToLower().Replace(" ", "")}Sidebar";
                <div id=@id class="sidebar-body-body-body sidebar-container sticky">
                    <button class="sidebar-button-back sidebar-button" onclick="closeSecondarySidebars()">
                    </button>
                    @foreach (ArtefactModel artefact in Model.Artefacts)
                    {
                        if (artefact.Class == artefactClass)
                        {
                            <button class="sidebar-button" onclick="location.href='@Url.Action("Artefact", "Database", new {artefactId = artefact.Id})'">
                                @artefact.Name
                            </button>
                        }
                    }
                </div>
            }
        }


        @* weapon sidebar *@
        @{
            List<string> weaponClasses = ["Assault Rifles", "Devices", "Other Weapons", "Machine Guns", "Melee Weapons", "Pistols", "Shotguns and Rifles", "Sniper Rifles", "Submachine Guns"];
        }
        <div id="weaponSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (string weaponClass in weaponClasses)
            {
                string id = $"{weaponClass.ToLower().Replace(" ", "")}Sidebar";
                <button class="sidebar-button" data-sidebar-id=@id onclick="openTertiarySidebar(this)">
                    @weaponClass
                </button>
            }
        </div>
        @{
            @foreach (string weaponClass in weaponClasses)
            {
                string id = $"{weaponClass.ToLower().Replace(" ", "")}Sidebar";
                <div id=@id class="sidebar-body-body-body sidebar-container sticky">
                    <button class="sidebar-button-back sidebar-button" onclick="closeSecondarySidebars()">
                    </button>
                    @foreach (WeaponModel weapon in Model.Weapons)
                    {
                        if (weapon.Class == weaponClass)
                        {
                            <button class="sidebar-button" onclick="location.href='@Url.Action("Weapon", "Database", new {weaponId = weapon.Id})'">
                                @weapon.Name
                            </button>
                        }
                    }
                </div>
            }
        }

        @* attachment sidebar *@
        @{
            List<string> attachmentClasses = ["Muzzles and Silencers", "Sights", "Hanguards and Brackets", "Magazines", "Other Attachments", "Pistol Grips"];
        }
        <div id="attachmentSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (string attachmentClass in attachmentClasses)
            {
                string id = $"{attachmentClass.ToLower().Replace(" ", "")}Sidebar";
                <button class="sidebar-button" data-sidebar-id=@id onclick="openTertiarySidebar(this)">
                    @attachmentClass
                </button>
            }
        </div>
        @{
            @foreach (string attachmentClass in attachmentClasses)
            {
                string id = $"{attachmentClass.ToLower().Replace(" ", "")}Sidebar";
                <div id=@id class="sidebar-body-body-body sidebar-container sticky">
                    <button class="sidebar-button-back sidebar-button" onclick="closeSecondarySidebars()">
                    </button>
                    @foreach (AttachmentModel attachment in Model.Attachments)
                    {
                        if (attachment.Class == attachmentClass)
                        {
                            <button class="sidebar-button" onclick="location.href='@Url.Action("Attachment", "Database", new {attachmentId = attachment.Id})'">
                                @attachment.Name
                            </button>
                        }
                    }
                </div>
            }
        }

        @* bullet sidebar *@
        <div id="bulletSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (BulletModel bullet in Model.Bullets)
            {
                <button class="sidebar-button" onclick="location.href='@Url.Action("Bullet", "Database", new {bulletId = bullet.Id})'">
                    @bullet.Name
                </button>
            }
        </div>

        @* grenade sidebar *@
        <div id="grenadeSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (GrenadeModel grenade in Model.Grenades)
            {
                <button class="sidebar-button" onclick="location.href='@Url.Action("Grenade", "Database", new {grenadeId = grenade.Id})'">
                    @grenade.Name
                </button>
            }
        </div>

        @* medicine sidebar *@
        <div id="medicineSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (MedicineModel medicine in Model.Medicines)
            {
                <button class="sidebar-button" onclick="location.href='@Url.Action("Medicine", "Database", new {medicineId = medicine.Id})'">
                    @medicine.Name
                </button>
            }
        </div>


        @* barter sidebar *@
        <div id="barterSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (OtherModel barter in Model.Barters)
            {
                <button class="sidebar-button" onclick="location.href='@Url.Action("Barter", "Database", new {barterId = barter.Id})'">
                    @barter.Name
                </button>
            }
        </div>

        @* paint sidebar *@
        <div id="paintSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (OtherModel paint in Model.Paints)
            {
                <button class="sidebar-button" onclick="location.href='@Url.Action("Paint", "Database", new {paintId = paint.Id})'">
                    @paint.Name
                </button>
            }
        </div>

        @* other sidebar *@
        <div id="otherSidebar" class="sidebar-body-body sidebar-container sticky">
            <button class="sidebar-button-back sidebar-button" onclick="closeMainSidebars()">
            </button>
            @foreach (OtherModel other in Model.Others)
            {
                <button class="sidebar-button" onclick="location.href='@Url.Action("Other", "Database", new {otherId = other.Id})'">
                    @other.Name
                </button>
            }
        </div>

    </div>
</div>
<div id="backgroundSidebar" class="sidebar-backgroub" onclick="closeDatabaseSidebar()">

</div>
